# -*- coding: utf-8 -*-
"""2: plotting connect-while-in-range simulation results

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1itwl25OKTVbSAYBycplLn1UdvyY6yvJp

# 3. Plotting results

The summary_and_plot function takes the output dictionaries created by calling run_simulation, and creates visualizations and summaries of that output.

There's three types of plots that are created by this function. Type 1: plots where the x-axes represent the varying input parameter, and the y-axes represent network measure values. These are created by the "create_plot"  and "ceate_plot_null_range" functions. Type 2: plots that represent average diffusion over time per input parameter value. These visualize the SI and complex contagion processes (see script 1). Type 3: bar plots that visualize the number of "crossover" occurances in the potion task (see script 1), per input parameter value.

"Create_plot" is a subfunction used to generate the network properties (y-axis) vs. input parameter (x-axis) plots. First, a scatterplot is created in which points are results for single rounds (as explained above, these are time-averaged network properties over T timesteps, except for connectivity which is a simple count). If R=100, each input parameter value on the x axis will have 100 results. Second, a trend line is drawn connecting the averages across these R single-round measures. Third, a transparent area is created corresponding to 1.5 standard deviations around this average. The function takes as input:

-index number of the current subplot (a matplotlib object of 4 subplots axes[0] through axes [4] is created in summary_and_plot);

-the input argument of summary_and_plot "parameter_label", which records the variable that was varied in the run_simulation call;

-"round_number", the current value of the for-loop over rounds inside of which create_plot will be called in summary_and_plot;

-"title" and "param_values" which are also input arguments of summary_and_plot;

-the relevant output dictionary of run_simulation;

-the relavant summary statistics created earlier in the summary_and_plot function.

The final network structure graphs show both the range and the null results in a single graph. "Create_plot_null_range" function is there specifically to plot runs where the varying parameter is range. Because the corresponding null-model parameter is not range but _P(connect)_, these plots cannot strictly be plotted on the same x-axis. Instead, this function adds a 'second x-axis' against which the null results are plotted.

The "summary_and_plot" function unpacks the results from run_simulation in another series of nested for-loops (simply to reformat the {R:{i{value}} dictionaries to {i{R:{value}} dictionaries), and creates plots of the network and diffusion process measures.

The function takes as input variables:

-the results dictionaries from run_simulation;

-"title", a string describing the plotted results;

-"parameter_label", a string describing the input parameter variable that was used in the simulation run;

-"param_values": this is a list of all the values that were taken by the varying input parameter.

To plot the results, call the summary_and_plot function. The arguments are (results,title,parameter_label,param_values,print_summary=True). For results, simply put the 'data' object defined by the run_simulation call (the result of script 1). For title, you can create a description of the output plots; i usually put "Average network properties of communication and transmission graph under varying [varying parameter]." For parameter_label, put the name of the varying input parameter chosen in the simulation run: "Range","N","g",or "P". For param_values, create a list of which the entries correspond to the values taken by the varying parameter. For P, this is list(round(np.linspace(0,11,1),1)); for the other parameters, it's list(range([chosen maximum value])). Below are some example calls.
"""

import networkx as nx
import numpy as np
import random
import matplotlib.pyplot as plt
import math
import scipy
import seaborn
import pandas
import copy

plt.rcParams.update({'figure.figsize': (10, 10)})
#this just globally sets the figure size

def create_plot(index,axes,parameter_label,round_number,title,param_values,multirundict,round_average,round_sd,null):
  axes[index].set_title(f"{parameter_label} vs. {title}")

  if null==False:
    linecolor = 'blue'
    areacolor = 'lightsteelblue'
    dotcolor = 'cornflowerblue'
  if null:
    linecolor = 'red'
    areacolor = 'mistyrose'
    dotcolor = 'lightcoral'

  for round_number in range(len(multirundict)):
      x_values = param_values
      y_values = [multirundict[round_number][value][0] for value in param_values]
      #Scatterplot of round average results of network properties:
      axes[index].scatter(x_values, y_values, color=dotcolor, alpha=0.3, s=2)

  #Plotting network property outcomes:
  axes[index].plot(param_values, list(round_average.values()), color=linecolor, label='Average Degree')
  axes[index].fill_between(param_values, np.array(list(round_average.values())) - 1.5 * np.array(list(round_sd.values())),
                         np.array(list(round_average.values())) + 1.5 * np.array(list(round_sd.values())), color=areacolor, alpha=0.3)

  axes[index].set_xlabel(parameter_label)
  axes[index].set_ylabel(f'{title}')
  #axes[index].legend()

  return axes[index]

def create_plot_null_range(index,axes,parameter_label,round_number,second_title,param_values,multirundict,round_average,round_sd):
  ax = axes[index].twiny()

  for round_number in range(len(multirundict)):
      x_values = param_values
      y_values = [multirundict[round_number][value][0] for value in param_values]
      #Scatterplot of round average results of network properties:
      ax.scatter(x_values, y_values, color='lightcoral', alpha=0.3, s=2)

  ax.plot(param_values, list(round_average.values()), color='red', label='Average Degree')
  ax.fill_between(param_values, np.array(list(round_average.values())) - 1.5 * np.array(list(round_sd.values())),
                         np.array(list(round_average.values())) + 1.5 * np.array(list(round_sd.values())), color='mistyrose', alpha=0.3)
  ax.set_xlabel(parameter_label)

  return ax

def summary_and_plot(results,title,parameter_label,param_values,print_summary=True,potion=False):
  multirun_crossover, multirun_freq, multirun_fixation,multirun_degree,multirun_clustering,multirun_connectedness,multirun_aspl,multirun_nr_components,multirun_largest_component, multirun_distribution, null_multirun_crossover, null_multirun_freq, null_multirun_fixation, null_multirun_degree, null_multirun_clustering, null_multirun_connectedness,null_multirun_aspl,null_multirun_nr_components,null_multirun_largest_component,null_multirun_distribution = results

  #intialize summary statistics:
  averages_per_value = {}
  sd_per_value = {}
  min_per_value = {}
  max_per_value = {}

  round_average_deg = {}
  round_sd_deg = {}
  round_min_deg = {}
  round_max_deg = {}

  round_average_cc = {}
  round_sd_cc = {}
  round_min_cc = {}
  round_max_cc = {}

  round_average_conn = {}
  round_sd_conn = {}
  round_min_conn = {}
  round_max_conn = {}

  round_average_aspl = {}
  round_sd_aspl = {}
  round_min_aspl = {}
  round_max_aspl = {}

  round_average_nrcomp = {}
  round_sd_nrcomp = {}
  round_min_nrcomp = {}
  round_max_nrcomp = {}

  round_average_lcomp = {}
  round_sd_lcomp = {}
  round_min_lcomp = {}
  round_max_lcomp = {}

  round_average_distr = {}
  round_sd_distr = {}
  round_min_distr = {}
  round_max_distr = {}

  null_averages_per_value = {}
  null_sd_per_value = {}
  null_min_per_value = {}
  null_max_per_value = {}

  null_round_average_deg = {}
  null_round_sd_deg = {}
  null_round_min_deg = {}
  null_round_max_deg = {}

  null_round_average_cc = {}
  null_round_sd_cc = {}
  null_round_min_cc = {}
  null_round_max_cc = {}

  null_round_average_conn = {}
  null_round_sd_conn = {}
  null_round_min_conn = {}
  null_round_max_conn = {}

  null_round_average_aspl = {}
  null_round_sd_aspl = {}
  null_round_min_aspl = {}
  null_round_max_aspl = {}

  null_round_average_nrcomp = {}
  null_round_sd_nrcomp = {}
  null_round_min_nrcomp = {}
  null_round_max_nrcomp = {}

  null_round_average_lcomp = {}
  null_round_sd_lcomp = {}
  null_round_min_lcomp = {}
  null_round_max_lcomp = {}

  null_round_average_distr = {}
  null_round_sd_distr = {}
  null_round_min_distr = {}
  null_round_max_distr = {}

  for value in param_values:
    #again, if range is the varying variable, the null model varies pc between 0 and 1.
    if parameter_label == 'Range':
      if value <=10:
        nullvalue = list(np.round(np.linspace(0,1,11),1))[value]
    else:
      nullvalue = value
    #again, skip the N = 0 iteration:
    if parameter_label == 'N' and value == 0:
      continue

    #initialize the network measure objects:
    average_t_r = {}
    sd_t_r ={}
    min_t_r={}
    max_t_r={}

    degree_values = []
    clustering_values = []
    connectedness_values = []
    aspl_values = []
    nrcomp_values = []
    lcomp_values = []
    distr_values = []

    null_average_t_r = {}
    null_sd_t_r ={}
    null_min_t_r={}
    null_max_t_r={}

    null_degree_values = []
    null_clustering_values = []
    null_connectedness_values = []
    null_aspl_values = []
    null_nrcomp_values = []
    null_lcomp_values = []
    null_distr_values = []

    #For the network property vs. input parameter graphs, retrieve the round-average values (y in the plots) at the current parameter value (x in the plots).
    for round_number in range(len(multirun_degree)):
      degree_values.append(multirun_degree[round_number][value][0])
      clustering_values.append(multirun_clustering[round_number][value][0])
      connectedness_values.append(multirun_connectedness[round_number][value][0])
      aspl_values.append(multirun_aspl[round_number][value][0])
      nrcomp_values.append(multirun_nr_components[round_number][value][0])
      lcomp_values.append(multirun_largest_component[round_number][value][0])
      distr_values.append(multirun_distribution[round_number][value][0])

      #Don't try to retrieve null results when g is the input parameter, because there isn't any
      if parameter_label != 'g':

        null_degree_values.append(null_multirun_degree[round_number][nullvalue][0])
        null_clustering_values.append(null_multirun_clustering[round_number][nullvalue][0])
        null_connectedness_values.append(null_multirun_connectedness[round_number][nullvalue][0])
        null_aspl_values.append(null_multirun_aspl[round_number][nullvalue][0])
        null_nrcomp_values.append(null_multirun_nr_components[round_number][nullvalue][0])
        null_lcomp_values.append(null_multirun_largest_component[round_number][nullvalue][0])
        null_distr_values.append(null_multirun_distribution[round_number][nullvalue][0])

    #For each parameter value, calculate statistics over the 100 runs done at that parameter value.
    round_average_deg[value] = np.mean(degree_values)
    round_sd_deg[value] = np.std(degree_values)
    round_min_deg[value] = np.min(degree_values)
    round_max_deg[value] = np.max(degree_values)

    round_average_cc[value] = np.mean(clustering_values)
    round_sd_cc[value] = np.std(clustering_values)
    round_min_cc[value] = np.min(clustering_values)
    round_max_cc[value] = np.max(clustering_values)

    round_average_conn[value] = np.mean(connectedness_values)
    round_sd_conn[value] = np.std(connectedness_values)
    round_min_conn[value] = np.min(connectedness_values)
    round_max_conn[value] = np.max(connectedness_values)

    round_average_aspl[value] = np.mean(aspl_values)
    round_sd_aspl[value] = np.std(aspl_values)
    round_min_aspl[value] = np.min(aspl_values)
    round_max_aspl[value] = np.max(aspl_values)

    round_average_nrcomp[value] = np.mean(nrcomp_values)
    round_sd_nrcomp[value] = np.std(nrcomp_values)
    round_min_nrcomp[value] = np.min(nrcomp_values)
    round_max_nrcomp[value] = np.max(nrcomp_values)

    round_average_lcomp[value] = np.mean(lcomp_values)
    round_sd_lcomp[value] = np.std(lcomp_values)
    round_min_lcomp[value] = np.min(lcomp_values)
    round_max_lcomp[value] = np.max(lcomp_values)

    round_average_distr[value] = np.mean(distr_values)
    round_sd_distr[value] = np.std(distr_values)
    round_min_distr[value] = np.min(distr_values)
    round_max_distr[value] = np.max(distr_values)

    if parameter_label != 'g':

      null_round_average_deg[nullvalue] = np.mean(null_degree_values)
      null_round_sd_deg[nullvalue] = np.std(null_degree_values)
      null_round_min_deg[nullvalue] = np.min(null_degree_values)
      null_round_max_deg[nullvalue] = np.max(null_degree_values)

      null_round_average_cc[nullvalue] = np.mean(null_clustering_values)
      null_round_sd_cc[nullvalue] = np.std(null_clustering_values)
      null_round_min_cc[nullvalue] = np.min(null_clustering_values)
      null_round_max_cc[nullvalue] = np.max(null_clustering_values)

      null_round_average_conn[nullvalue] = np.mean(null_connectedness_values)
      null_round_sd_conn[nullvalue] = np.std(null_connectedness_values)
      null_round_min_conn[nullvalue] = np.min(null_connectedness_values)
      null_round_max_conn[nullvalue] = np.max(null_connectedness_values)

      null_round_average_aspl[nullvalue] = np.mean(null_aspl_values)
      null_round_sd_aspl[nullvalue] = np.std(null_aspl_values)
      null_round_min_aspl[nullvalue] = np.min(null_aspl_values)
      null_round_max_aspl[nullvalue] = np.max(null_aspl_values)

      null_round_average_nrcomp[value] = np.mean(null_nrcomp_values)
      null_round_sd_nrcomp[value] = np.std(null_nrcomp_values)
      null_round_min_nrcomp[value] = np.min(null_nrcomp_values)
      null_round_max_nrcomp[value] = np.max(null_nrcomp_values)

      null_round_average_lcomp[value] = np.mean(null_lcomp_values)
      null_round_sd_lcomp[value] = np.std(null_lcomp_values)
      null_round_min_lcomp[value] = np.min(null_lcomp_values)
      null_round_max_lcomp[value] = np.max(null_lcomp_values)

      null_round_average_distr[value] = np.mean(null_distr_values)
      null_round_sd_distr[value] = np.std(null_distr_values)
      null_round_min_distr[value] = np.min(null_distr_values)
      null_round_max_distr[value] = np.max(null_distr_values)

  #Plots of input parameters(x) versus network structure outcomes (y):

  # Create four subplots side by side
  fig, axes = plt.subplots(2, 4, figsize=(20, 12))
  axes = axes.flatten()

  axes[0] = create_plot(0,axes,parameter_label,round_number,'Average degree',param_values,multirun_degree,
              round_average_deg,round_sd_deg,False)

  axes[1] = create_plot(1,axes,parameter_label,round_number,'Clustering coefficient',param_values,multirun_clustering,
              round_average_cc,round_sd_cc,False)

  axes[2] = create_plot(2,axes,parameter_label,round_number,'Connected graphs',param_values,multirun_connectedness,
              round_average_conn,round_sd_conn,False)

  axes[3] = create_plot(3,axes,parameter_label,round_number,'Average shortest path length',param_values,multirun_aspl,
              round_average_aspl,round_sd_aspl,False)

  axes[4] = create_plot(4,axes,parameter_label,round_number,'Number of components',param_values,multirun_nr_components,
              round_average_nrcomp,round_sd_nrcomp,False)

  axes[5] = create_plot(5,axes,parameter_label,round_number,'Size of largest component',param_values,multirun_largest_component,
              round_average_lcomp,round_sd_lcomp,False)

  axes[6] = create_plot(6,axes,parameter_label,round_number,'Gini-coefficient of degree distribution',param_values,multirun_distribution,round_average_distr,round_sd_distr,False)


  if parameter_label != 'g':

    if parameter_label == 'Range':
      null_label = 'P(connect)'
      null_param_values = list(np.round(np.linspace(0,1,11),1))

      ax0 = create_plot_null_range(0,axes,null_label,round_number,'P(connect)',null_param_values,null_multirun_degree,null_round_average_deg,null_round_sd_deg)

      ax1 = create_plot_null_range(1,axes,null_label,round_number,'Clustering coefficient',null_param_values,null_multirun_clustering,null_round_average_cc,null_round_sd_cc)

      ax2 = create_plot_null_range(2,axes,null_label,round_number,'Connected graphs',null_param_values,null_multirun_connectedness,null_round_average_conn,null_round_sd_conn)

      ax3 = create_plot_null_range(3,axes,null_label,round_number,'Average shortest path length',null_param_values,null_multirun_aspl,null_round_average_aspl,null_round_sd_aspl)

      ax4 = create_plot_null_range(4,axes,null_label,round_number,'Number of components',null_param_values,null_multirun_nr_components,null_round_average_nrcomp,null_round_sd_nrcomp)

      ax5 = create_plot_null_range(5,axes,null_label,round_number,'Size of largest component',null_param_values,null_multirun_largest_component,null_round_average_lcomp,null_round_sd_lcomp)

      ax6 = create_plot_null_range(6,axes,null_label,round_number,'Gini-coefficient of degree distribution',null_param_values,null_multirun_distribution, null_round_average_distr,null_round_sd_distr)

    else:
      null_label = parameter_label
      null_param_values = param_values

      #In the other cases, N and P, the label is the same in the null runs. In the g case, no null models are generated.

      axes[0] = create_plot(0,axes,null_label,round_number,'Average degree',null_param_values,null_multirun_degree,
                            null_round_average_deg,null_round_sd_deg,True)

      axes[1] = create_plot(1,axes,null_label,round_number,'Clustering coefficient',null_param_values,null_multirun_clustering,
                            null_round_average_cc,null_round_sd_cc,True)

      axes[2] = create_plot(2,axes,null_label,round_number,'Connected graphs',null_param_values,null_multirun_connectedness,
                            null_round_average_conn,null_round_sd_conn,True)

      axes[3] = create_plot(3,axes,null_label,round_number,'Average shortest path length',null_param_values,null_multirun_aspl,
                            null_round_average_aspl,null_round_sd_aspl,True)

      axes[4] = create_plot(4,axes,null_label,round_number,'Number of components',null_param_values,null_multirun_nr_components,
                null_round_average_nrcomp,null_round_sd_nrcomp,True)

      axes[5] = create_plot(5,axes,null_label,round_number,'Size of largest component',null_param_values,null_multirun_largest_component,
                null_round_average_lcomp,null_round_sd_lcomp,True)

      axes[6] = create_plot(6,axes,null_label,round_number,'Gini-coefficient of degree distribution',null_param_values,null_multirun_distribution,
                            null_round_average_distr,null_round_sd_distr,True)


    fig.delaxes(axes[7])
    plt.tight_layout()
    plt.show()

    #If potion task, this should be a nonempty list.
    if potion:

      #Potion task bar plots: on x, the varying parameter, on y amount of crossover events out of R rounds (given T timesteps).
      fig,axes = plt.subplots(1,2,figsize = (20,5))

      t_values = len(multirun_freq[1][1].keys())

      if parameter_label == 'Range':
        null_label = 'P(connect)'
        null_param_values = list(np.round(np.linspace(0,1,11),1))
      else:
        null_label = parameter_label
        null_param_values = param_values

      y = []
      y_null = []

      R = len(multirun_degree)

      crossover_instances_allrounds = {}
      average_time_per_value = {}
      total_average_excl = 0
      total_average_incl = 0

      null_crossover_instances_allrounds = {}
      null_average_time_per_value = {}
      null_total_average_excl = 0
      null_total_average_incl = 0

      #aim here: retrieve all crossover times per input value from multirun_crossover.
      for value in param_values:
        ycount = 0
        for round_number in range(R):
          crossover_instances = []
          #The value of "cross_time" is either an integer when crossover was reached, or a string stating it wasn't.
          #Here, we count how many times a crossover occured by counting integers, and add it to the summary statistic list "crossover_instances."
          currentvalue = multirun_crossover[round_number][value]
          if currentvalue != "crossover not reached":
            ycount += 1
            #list of crossover instances at i this round:
            crossover_instances.append(currentvalue)
        y.append(ycount)
        #list of crossover instances at i, all rounds:
        #crossover_instances_allrounds.update({value:crossover_instances})
        #average_time_per_value.update({value:np.mean(crossover_instances)})

      #Total average of time to crossover, including only runs that had succesful crossover:
      #total_average_excl = np.mean(average_time_per_value.items())

      #Total average including every run:

      for null_value in null_param_values:
        ycount_null = 0
        for round_number in range(R):
          null_crossover_instances = []
          currentvalue_null = null_multirun_crossover[round_number][null_value]
          if currentvalue_null != "crossover not reached":
            ycount_null += 1
            null_crossover_instances.append(currentvalue_null)
        y_null.append(ycount_null)
        #null_crossover_instances_allrounds.update({null_value:null_crossover_instances})
        #null_average_time_per_value.update({null_value:np.mean(null_crossover_instances.items())})

      #null_total_average_excl = np.mean(null_average_time_per_value.items())

      #Total average including every run:

      axes[0].bar(param_values,y)
      axes[0].set_xticks(param_values)
      axes[0].set_ylabel(f'Crossovers reached out of {R} rounds')
      axes[0].set_xlabel(f'{parameter_label}')
      max_y = max(y)
      axes[0].set_yticks(range(0, max_y + 1))

      if parameter_label =="Range":
        width = 0.08
      axes[1].bar(null_param_values,y_null,width=width)
      axes[1].set_ylabel(f'Crossovers reached out of {R} rounds')
      axes[1].set_xlabel(f'{null_label}')
      axes[1].set_xticks(null_param_values)
      max_y_null = max(y_null)
      axes[1].set_yticks(range(0, max_y_null + 1))
      #axes[1].set_xlim(0,1)

      plt.tight_layout()
      plt.show()

    else:
      fig,axes = plt.subplots(1,2,figsize = (20,5))

      t_values = len(multirun_freq[1][1].keys())
      R_values = len(multirun_degree)
      #nothing special about this dictionary or the indexes, just want to retrieve the number of rounds and timesteps

      #First plot, time on x, varying input parameter on y:

      for value in param_values:
        average_t_r = {}
        sd_t_r ={}
        min_t_r={}
        max_t_r={}

        for t in range(t_values):
          yparam_value_list = []

          for round_number in range(R_values):
            #at the following line it's giving me a keyerror: 2. Why?
            yparam_value_at_t = multirun_freq[round_number][value][t]

            #in the dictionary tracking the trait frequency at each timestep, retrieve that frequency at
            #the current parameter value, round and timestep.
            yparam_value_list.append(yparam_value_at_t)

          average_at_t = np.mean(yparam_value_list)
          sd_at_t = np.std(yparam_value_list)
          min_value_at_t = min(yparam_value_list)
          max_value_at_t = max(yparam_value_list)

          average_t_r.update({t:average_at_t})
          sd_t_r.update({t:sd_at_t})
          min_t_r.update({t:min_value_at_t})
          max_t_r.update({t:max_value_at_t})

        averages_per_value.update({value:average_t_r})
        sd_per_value.update({value:sd_t_r})
        min_per_value.update({value:min_t_r})
        max_per_value.update({value:max_t_r})

        xlist = [t for t in range(t_values)]
        ylist = []
        for t in range(t_values):
          #because this is is also how many y-values were taken
          ylist.append(averages_per_value[value][t])
        axes[0].plot(xlist,ylist,label=f'{parameter_label}= {value}')
        axes[0].set_xlabel('Timestep')
        axes[0].set_ylabel('Trait frequency')
        axes[0].set_title('Diffusion over time')
        axes[0].legend()

      #Second plot, null run:

      if parameter_label != 'g':

        if parameter_label =="Range":
          looplist = list(np.round(np.linspace(0,1,11),1))
        else:
          looplist = list(range(len(param_values)))

        for value in looplist:
          null_average_t_r = {}
          null_sd_t_r ={}
          null_min_t_r={}
          null_max_t_r={}

          for t in range(t_values):
            null_yparam_value_list = []

            for round_number in range(R_values):
              if parameter_label == 'N' and value == 0:
                continue
              null_yparam_value_at_t = null_multirun_freq[round_number][value][t]
              #in the dictionary tracking the trait frequency at each timestep, retrieve that frequency at
              #the current parameter value, round and timestep.
              null_yparam_value_list.append(null_yparam_value_at_t)

              null_average_at_t = np.mean(null_yparam_value_list)
              null_sd_at_t = np.std(null_yparam_value_list)
              null_min_value_at_t = min(null_yparam_value_list)
              null_max_value_at_t = max(null_yparam_value_list)

              null_average_t_r.update({t:null_average_at_t})
              null_sd_t_r.update({t:null_sd_at_t})
              null_min_t_r.update({t:null_min_value_at_t})
              null_max_t_r.update({t:null_max_value_at_t})

            null_averages_per_value.update({value:null_average_t_r})
            null_sd_per_value.update({value:null_sd_t_r})
            null_min_per_value.update({value:null_min_t_r})
            null_max_per_value.update({value:null_max_t_r})

          null_averages_per_value.update({value:null_average_t_r})
          null_sd_per_value.update({value:null_sd_t_r})
          null_min_per_value.update({value:null_min_t_r})
          null_max_per_value.update({value:null_max_t_r})

          xlist = [t for t in range(t_values)]
          ylist = []
          for t in range(t_values):
            if parameter_label == 'N' and value == 0:
              continue
            #because this is is also how many y-values were taken
            ylist.append(null_averages_per_value[value][t])
          if parameter_label == 'Range':
            parameter_label = 'P(connect)'
          axes[1].plot(xlist,ylist,label=f'{parameter_label}={value}')
          axes[1].set_xlabel('Timestep')
          axes[1].set_ylabel('Trait frequency')
          axes[1].set_title('Diffusion over time: null model')
          axes[1].legend()

        plt.tight_layout()
        plt.show()


#Call corresponding to example 1 in script 1: varying parameter is range between 0 and 10, diffusion process is SI.
summary_and_plot(datar,"Average network properties and diffusion under varying communication range",'Range',list(range(11)))

#Call corresponding to example 2: varying parameter is N between 0 and 100, diffusion process is potion task.
summary_and_plot(dataN,"Average network properties and potion task performance under varying communication range","N",list(range(101)))

#Call corresponding to example 3: varying parameter is g between 0 and 50, diffusion process is complex contagion.
summary_and_plot(datag,"Average network properties and diffusion under varying communication range","g",list(range(51)))
